/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Social {
  export type PostStruct = {
    author: AddressLike;
    id: BigNumberish;
    postTxt: string;
    postImg: string;
    tipAmount: BigNumberish;
  };

  export type PostStructOutput = [
    author: string,
    id: bigint,
    postTxt: string,
    postImg: string,
    tipAmount: bigint
  ] & {
    author: string;
    id: bigint;
    postTxt: string;
    postImg: string;
    tipAmount: bigint;
  };
}

export interface SocialInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addPost"
      | "buyMeCoffee"
      | "getAllPost"
      | "getMyPost"
      | "owner"
      | "profiles"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PostTipped" | "postCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "addPost",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyMeCoffee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPost",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getMyPost", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "profiles",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addPost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyMeCoffee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAllPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMyPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "profiles", data: BytesLike): Result;
}

export namespace PostTippedEvent {
  export type InputTuple = [
    id: BigNumberish,
    hash: string,
    tipAmount: BigNumberish,
    author: AddressLike
  ];
  export type OutputTuple = [
    id: bigint,
    hash: string,
    tipAmount: bigint,
    author: string
  ];
  export interface OutputObject {
    id: bigint;
    hash: string;
    tipAmount: bigint;
    author: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace postCreatedEvent {
  export type InputTuple = [
    author: AddressLike,
    id: BigNumberish,
    postTxt: string,
    postImg: string,
    tipAmount: BigNumberish
  ];
  export type OutputTuple = [
    author: string,
    id: bigint,
    postTxt: string,
    postImg: string,
    tipAmount: bigint
  ];
  export interface OutputObject {
    author: string;
    id: bigint;
    postTxt: string;
    postImg: string;
    tipAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Social extends BaseContract {
  connect(runner?: ContractRunner | null): Social;
  waitForDeployment(): Promise<this>;

  interface: SocialInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addPost: TypedContractMethod<
    [postTxt: string, postImg: string],
    [void],
    "nonpayable"
  >;

  buyMeCoffee: TypedContractMethod<[_id: BigNumberish], [void], "payable">;

  getAllPost: TypedContractMethod<[], [Social.PostStructOutput[]], "view">;

  getMyPost: TypedContractMethod<[], [Social.PostStructOutput[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  profiles: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addPost"
  ): TypedContractMethod<
    [postTxt: string, postImg: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyMeCoffee"
  ): TypedContractMethod<[_id: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getAllPost"
  ): TypedContractMethod<[], [Social.PostStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getMyPost"
  ): TypedContractMethod<[], [Social.PostStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "profiles"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "PostTipped"
  ): TypedContractEvent<
    PostTippedEvent.InputTuple,
    PostTippedEvent.OutputTuple,
    PostTippedEvent.OutputObject
  >;
  getEvent(
    key: "postCreated"
  ): TypedContractEvent<
    postCreatedEvent.InputTuple,
    postCreatedEvent.OutputTuple,
    postCreatedEvent.OutputObject
  >;

  filters: {
    "PostTipped(uint256,string,uint256,address)": TypedContractEvent<
      PostTippedEvent.InputTuple,
      PostTippedEvent.OutputTuple,
      PostTippedEvent.OutputObject
    >;
    PostTipped: TypedContractEvent<
      PostTippedEvent.InputTuple,
      PostTippedEvent.OutputTuple,
      PostTippedEvent.OutputObject
    >;

    "postCreated(address,uint256,string,string,uint256)": TypedContractEvent<
      postCreatedEvent.InputTuple,
      postCreatedEvent.OutputTuple,
      postCreatedEvent.OutputObject
    >;
    postCreated: TypedContractEvent<
      postCreatedEvent.InputTuple,
      postCreatedEvent.OutputTuple,
      postCreatedEvent.OutputObject
    >;
  };
}
